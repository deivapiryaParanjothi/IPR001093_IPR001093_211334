--collect the TMP profile in HTML format. To conver the html page into readable format using the below power query
let
    Source = File.Contents("C:\Users\211334\OneDrive - Cognizant\desktop\SO\Talent Market Place.html"),
    #"Extracted Table From Html" = Html.Table(Source, {{"Column1", ".associate-name-id"}, {"Column2", "P .ng-scope + *"}, {"Column3", ".profile-details-tile-wrapper + *"}, {"Column4", ".profile-pic-wrapper"}, {"Column5", "P:nth-child(3)"}, {"Column6", "P:nth-child(3) *"}, {"Column7", "P:nth-child(4) *"}, {"Column8", ".profileTextWrap"}, {"Column9", ".skill-family-wrapper .skill2"}, {"Column10", ".technical-skill-wrapper .skill2"}, {"Column11", ".domain-skill-wrapper .skill2"}, {"Column12", ".col-md-6 .ng-scope .ng-scope"}, {"Column13", "P .ng-scope"}, {"Column14", ".skill-family-wrapper .skill1"}, {"Column15", ".technical-skill-wrapper .skill1"}, {"Column16", ".domain-skill-wrapper .skill1"}, {"Column17", ".ist"}, {"Column18", ".soft-blocked-message .ng-binding + *"}}, [RowSelector=".col-md-6"]),
    #"Changed Type" = Table.TransformColumnTypes(#"Extracted Table From Html",{{"Column1", type text}, {"Column2", type text}, {"Column3", type text}, {"Column4", type text}, {"Column5", type text}, {"Column6", type date}, {"Column7", type text}, {"Column8", type text}, {"Column9", type text}, {"Column10", type text}, {"Column11", type text}, {"Column12", type text}, {"Column13", type text}, {"Column14", type text}, {"Column15", type text}, {"Column16", type text}, {"Column17", type text}, {"Column18", type text}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"Column1", "Associate"}, {"Column2", "Grade"}, {"Column3", "Pool"}, {"Column4", "Status"}, {"Column5", "Available From"}}),
    #"Renamed Columns1" = Table.RenameColumns(#"Renamed Columns",{{"Column7", "Location"}}),
    #"Removed Columns1" = Table.RemoveColumns(#"Renamed Columns1",{"Column8"}),
    #"Renamed Columns2" = Table.RenameColumns(#"Removed Columns1",{{"Column9", "Skill"}, {"Column10", "Technical Skill"}, {"Column11", "Domain Skill"}, {"Column12", "Status with SO"}}),
    #"Removed Columns2" = Table.RemoveColumns(#"Renamed Columns2",{"Column13", "Column14", "Column15", "Column16", "Column17", "Column18"}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Removed Columns2",{{"Associate", type text}, {"Grade", type text}, {"Pool", type text}, {"Status", type text}, {"Available From", type text}, {"Location", type text}, {"Skill", type text}, {"Technical Skill", type text}, {"Domain Skill", type text}, {"Status with SO", type text}}),
    #"Renamed Columns3" = Table.RenameColumns(#"Changed Type1",{{"Column6", "Availability"}}),
    #"Changed Type3" = Table.TransformColumnTypes(#"Renamed Columns3",{{"Availability", type date}}),
    #"Replaced Errors" = Table.ReplaceErrorValues(#"Changed Type3", {{"Availability", #date(1111, 11, 11)}}),
    #"Filtered Rows" = Table.SelectRows(#"Replaced Errors", each ([Associate] <> null))
in
    #"Filtered Rows"

--to get the profiles based on skill and separate the evaluated profile from the new profile
let
    Source = Excel.CurrentWorkbook(),
    #"Filtered Rows" = Table.SelectRows(Source, each ([Name] = "TMP")),
    #"Expanded Content" = Table.ExpandTableColumn(#"Filtered Rows", "Content", {"Associate", "Grade", "Pool", "Status", "Available From", "Location", "Skill", "Technical Skill", "Domain Skill", "Status with SO", "Column1"}, {"Associate", "Grade", "Pool", "Status", "Available From", "Location", "Skill", "Technical Skill", "Domain Skill", "Status with SO", "Column1"}),
    #"Sorted Rows" = Table.Sort(#"Expanded Content",{{"Column1", Order.Descending}}),
    #"Added Custom" = Table.AddColumn(#"Sorted Rows", "Skills", each if Text.Contains([Technical Skill], "lik") then "Qlik" else if Text.Contains([Technical Skill], "lik Admin") then "Qlik" else if Text.Contains([Technical Skill], "LIK ADMIN") then "Qlik" else  if Text.Contains([Technical Skill], "lik admin") then "Qlik"  else if Text.Contains([Technical Skill],"") then "No" else "No"),
    #"Filtered Rows4" = Table.SelectRows(#"Added Custom", each ([Technical Skill] <> null)),
    #"Replaced Errors" = Table.ReplaceErrorValues(#"Filtered Rows4", {{"Skills", "No"}}),
    #"Filtered Rows3" = Table.SelectRows(#"Replaced Errors", each ([Status with SO] = null)),
    #"Removed Columns" = Table.RemoveColumns(#"Filtered Rows3",{"Status", "Pool", "Domain Skill", "Status with SO", "Name", "Skill", "Technical Skill"}),
    #"Filtered Rows1" = Table.SelectRows(#"Removed Columns", each ([Associate] <> null) and Text.Contains([Skills] ,"Qlik")),
    #"Reordered Columns" = Table.ReorderColumns(#"Filtered Rows1",{"Skills", "Associate", "Grade", "Available From", "Location", "Column1"}),
    #"Renamed Columns" = Table.RenameColumns(#"Reordered Columns",{{"Column1", "empid"}}),
    #"Removed Duplicates" = Table.Distinct(#"Renamed Columns", {"Associate"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Removed Duplicates",{{"Associate", type text}}),
    #"Merged Queries" = Table.FuzzyNestedJoin(#"Changed Type", {"Associate"}, ProfileTracker, {"Associate"}, "ProfileTracker", JoinKind.LeftOuter, [IgnoreCase=true, IgnoreSpace=true, NumberOfMatches=1, Threshold=0.3]),
    #"Expanded ProfileTracker" = Table.ExpandTableColumn(#"Merged Queries", "ProfileTracker", {"Associate", "Status", "Drive Date"}, {"Associate.1", "Status", "Drive Date"}),
    #"Added Custom1" = Table.AddColumn(#"Expanded ProfileTracker", "Current Status", each if [Status]=null and [Associate.1]=null then "New Profile" else "evaluated-Pls check the status and ignore"),
    #"Added Custom2" = Table.AddColumn(#"Added Custom1", "flag", each if [Status] = null and [Associate.1]=null then 0 else 1),
    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Added Custom2", {"Drive Date"}),
    #"Sorted Rows2" = Table.Sort(#"Removed Errors",{{"flag", Order.Ascending},{"Drive Date", Order.Descending}}),
    #"Removed Columns1" = Table.RemoveColumns(#"Sorted Rows2",{"flag"})
in
    #"Removed Columns1"

